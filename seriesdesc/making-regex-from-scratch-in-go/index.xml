<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>making regex from scratch in GO on Lewis Metcalf</title><link>https://leweym.github.io/seriesdesc/making-regex-from-scratch-in-go/</link><description>Recent content in making regex from scratch in GO on Lewis Metcalf</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://leweym.github.io/seriesdesc/making-regex-from-scratch-in-go/index.xml" rel="self" type="application/rss+xml"/><item><title>making regex from scratch in GO</title><link>https://leweym.github.io/series-descriptions/making-regex-from-scratch-in-go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leweym.github.io/series-descriptions/making-regex-from-scratch-in-go/</guid><description>This series is a step by step guide to creating an (almost) fully fledged Regex engine using Go. It explores the basics of Finite State Automata, incrementally creates a parser and compiler for turning strings into state machines, walks through the setup of a visualizer for the FSM node graph. All of the development is structured as a TDD project, and uses modern Go features such as fuzzing, generics, and profiling.</description></item></channel></rss>